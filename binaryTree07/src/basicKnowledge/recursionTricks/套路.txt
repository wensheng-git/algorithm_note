## 二叉树的递归套路
可以解决面试中绝大多数的二叉树问题尤其是[[树型DP]]问题
本质是利用递归遍历二叉树的便利性
1）假设以X节点为头，假设可以向X左树和X右树要任何信息
2）在上一步的假设下，讨论以X为头节点的树，得到答案的可能性（最重要）
3）列出所有可能性后，确定到底需要向左树和右树要什么样的信息
4）把左树信息和右树信息求全集，就是任何一棵子树都需要返回的信息S
5）递归函数都返回S，每一棵子树都这么要求
6）写代码，在代码中考虑如何把左树的信息和右树信息整合出整棵树的信息
模板:
//终止条件===TODO:终止条件没有返回Info的时候,子树信息要判断root.left/right是不是为null再收集
//子树信息
//加工本节点信息:TODO:(如果终止条件返回null,本节点信息默认值以一个节点{即本节点}为树的时候去思考)信息尽量直接使用左右子树去加工避免发生其他没有思考到位的错误
//向上返回

### 二叉树的递归套路深度实践
- 题目1: [[判断二叉树是不是平衡二叉树]]
- 题目2: [[判断二叉树是不是满二叉树]]
- 题目3: [[判断二叉树是不是搜索二叉树]]
- 题目4: [[二叉树中最大的二叉搜索子树的大小]]
- 题目5: [[二叉树中最大的二叉搜索子树的头节点]]
- 题目6: [[二叉树上两个节点的最低公共祖先]]
- 题目7: [[求二叉树两个节点的最大距离]]
- 题目8: [[派对的最大快乐值]]



TODO:
    总结:
    改变二叉树结构的时候,去采用各种遍历
    得到二叉树的某些特性的时候,用递归套路,本质是后序遍历